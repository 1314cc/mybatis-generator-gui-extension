
controls.chooseDir=Choose dir
controls.chooseFile=Choose File
msg.msg=Message
msg.title=Message

msg.unsupportedDatabase=Unsupported database
msg.dbConfigInvalid=Invalid Database Config

msg.error.configHasProblems=Your Config has problems:
msg.error.NoDatabaseSelected=No database selected
msg.error.NoTableSelected=No table selected
msg.error.MapperDirNotConfigured=You've not config the mapper dir
msg.error.MapperPackageNotConfigured=You've not config the mapper package
msg.error.DAODirNotConfigured=You've not config the dao dir
msg.error.DAOPackageNotConfigured=You've not config the dao package
msg.error.MapperObjNameNotConfigured=You've not config the name of mapper
msg.error.EntityDirNotConfigured=You've not config the entity dir
msg.error.EntityPackageNotConfigured=You've not config the entity package
msg.error.EntityObjNameNotConfigured=You've not config the entity name
msg.error.SaveSuccess=Save Success
msg.error.SaveFailure=Save Failure




ui.newConnection=New Connection
ui.useSavedConfig=Use Saved Config

ui.simpleMode.on=Simple Mode(on)
ui.simpleMode.off=Simple Mode(off)
ui.customizeColumn=Customize Column
ui.saveConfig=Save Config
ui.generateCode=Generate Code
ui.testConnection=Test Connection
ui.connectSuccess=Connect Success
ui.connectFailureMsg=Connection failure,error message:
ui.save=Save
ui.cancel=Cancel

ui.closeConnection=Close
ui.editConnection=Edit
ui.deleteConnection=Delete

ui.about.title=About MBG-GUI-EXTENSION
ui.about.desc=\u0020\u0020\u0020\u0020This Software aims to provide a simple way to config MBG with a graphical user interface.\n\u0020\u0020\u0020\u0020You can use this software to generate codes for free, and you have complete domination on those codes. But it must be free when you provide the copy of this software(MBG-GUI-EXTENSION) to others.
ui.about.repo=github repo\uFF1A
ui.about.donate.alipay=Donate (Ali Pay)
ui.about.donate.weixinpay=Donate\uFF08Weixin Pay\uFF09

ui.customizeColumns.prompt=Uncheck the check box if you want to ignore the column.\n Double click to edit.
ui.customizeColumns.column.checked=checked
ui.customizeColumns.column.name=ColumnName
ui.customizeColumns.column.jdbcType=JdbcType
ui.customizeColumns.column.javaType=JavaType
ui.customizeColumns.column.propertyName=PropertyName
ui.customizeColumns.column.typeHandler=TypeHandler

ui.tab.1.BASIC_SETTINGS=BASIC_SETTINGS
ui.tab.2.DATA_ACCESS_OBJECT=DATA_ACCESS_OBJECT
ui.tab.3.DOMAIN_OBJECT=DOMAIN_OBJECT
ui.tab.4.SERVICE=SERVICE
ui.tab.5.COMMENT=COMMENT
ui.tab.6.CACHE=CACHE

project.savedName.labelText=Saved Name
project.savedName.promptText=e.g. MyConfig
project.savedName.onValidateError=Saved Name
project.savedName.helpText=The file name to save your config (existed file will be override)
project.projectDir.labelText=Project Dir
project.projectDir.promptText=e.g.`C:/MyProject`
project.projectDir.onValidateError=emm
project.projectDir.helpText=The root dir of your project.
project.basePackage.labelText=Base Package
project.basePackage.promptText=e.g.`com.example.ssm`
project.basePackage.onValidateError=emm
project.basePackage.helpText=The base package of your project.\n This field will be used for generate entity package, dao package,etc.\n\n for example, if you input `com.example.ssm`,\n the entity package will auto change to `com.example.ssm.entity`
project.javaClientMapperType.labelText=Java Client Mapper Type
project.javaClientMapperType.promptText=Java Client Mapper Type
project.javaClientMapperType.onValidateError=emm
project.javaClientMapperType.helpText=This attribute is used to select one of the predefined Java Client generators,\n\
                or to specify a user provided Java Client generator. \n\
                Any user provided DAO generator must extend the class org.mybatis.generator.codegen.AbstractJavaClientGenerator class, \n\
                and must have a public default constructor.\n\
                The attribute accepts the following values for selecting one of the predefined generators:\n\
ANNOTATEDMAPPER:tThe generated objects will be Java interfaces for the MyBatis 3.x mapper infrastructure. \n\
                \t\t\t\tThe interfaces will be based on annotations and MyBatis 3.x SqlProviders. No XML mapper files will be generated.\n\n\
MIXEDMAPPER:    \tThe generated objects will be Java interfaces for the MyBatis 3.x mapper infrastructure. \n\
                \t\t\t\tThe interfaces will be based on a mix of annotations and XML. \n\
                \t\t\t\tAn annotation will be used where a simple annotation will work. \n\
                \t\t\t\tThis client will not generate and Sql Provider, so all complex dynamic SQL will be generated in XML.\n\n\
XMLMAPPER:      \tThe generated objects will be Java interfaces for the MyBatis 3.x mapper infrastructure. \n\
                \t\t\t\tThe interfaces will be dependent on generated XML mapper files.

project.reduceTablePrefix.labelText=Reduce Table Prefix
project.reduceTablePrefix.promptText=Reduce Table Prefix
project.reduceTablePrefix.onValidateError=emm
project.reduceTablePrefix.helpText=Reduce the table prefix while generating obj names.\n\nIt is case insensitive. You should write it in regex expression,\ne.g:`(t|T)_`
project.daoObjSuffix.labelText=Dao Obj Suffix
project.daoObjSuffix.promptText=e.g `Mapper`
project.daoObjSuffix.onValidateError=emm
project.daoObjSuffix.helpText=The suffix of data access object. \nIf you set it as `Mapper`,and  select a table such as `user_group`, \n you will get a java client name `UserGroupMapper` and a xml mapper name `UserGroupMapper. \n\nThe default value is `Mapper`
project.daoPackageSuffix.labelText=Dao Package Suffix
project.daoPackageSuffix.promptText=Dao Package Suffix
project.daoPackageSuffix.onValidateError=emm
project.daoPackageSuffix.helpText=the package suffix of data access object.\n if you've input the base package like `com.example.ssm`,\n the dao package will auto change to `com.example.ssm.dao`
project.entityObjSuffix.labelText=Entity Obj Suffix
project.entityObjSuffix.promptText=default: empty
project.entityObjSuffix.onValidateError=emm
project.entityObjSuffix.helpText=The suffix of entity object. \nIf you set it as `Entity`,and  select a table such as `user_group`, you will get a entity name `UserGroupEntity`.
project.exampleObjSuffix.labelText=Example Obj Suffix
project.exampleObjSuffix.promptText=Example Obj Suffix
project.exampleObjSuffix.onValidateError=emm
project.exampleObjSuffix.helpText=The suffix of example object. \nIf you set it as `Example`,and  select a table such as `user_group`, you will get a example name `UserGroupExample`.
project.entityPackageSuffix.labelText=Entity Package Suffix
project.entityPackageSuffix.promptText=Entity Package Suffix
project.entityPackageSuffix.onValidateError=emm
project.entityPackageSuffix.helpText=the package suffix of entity.\n if you've input the base package like `com.example.ssm`,\n the entity package will auto change to `com.example.ssm.entity`
project.fileHeader.labelText=File Header
project.fileHeader.promptText=File Header
project.fileHeader.onValidateError=emm
project.fileHeader.helpText=the comment of a class, only available when `Enable Comment` is true\
e.g\
/**\n\
  * Create By MBG-GUI-EXTENSION \n\
  * Description:\n\
  * ${tableComment}(this var will be replaced by table comment)\n\
  * \n\
  * @author \n\
  **/
project.enableComment.labelText=Enable Comment
project.enableComment.helpText=Enable Comment.\nThe comment plugin will generate:\n\t field comment(based on table field comment), \n\t class comment(if you've input the file header)
project.mapperDir.labelText=Mapper Dir
project.mapperDir.promptText=e.g `src/main/resources`
project.mapperDir.onValidateError=emm
project.mapperDir.helpText=the dir to save your `xxMapper.xml`
project.mapperPackage.labelText=Mapper Package
project.mapperPackage.promptText=e.g. `mapper`
project.mapperPackage.onValidateError=emm
project.mapperPackage.helpText=the package of your `xxMapper.xml`.
project.daoDir.labelText=Dao Dir
project.daoDir.promptText=e.g`src/main/java`
project.daoDir.onValidateError=emm
project.daoDir.helpText=the dir to save your Mapper(java interface)
project.daoPackage.labelText=Dao Package
project.daoPackage.promptText=e.g`com.example.ssm.dao`
project.daoPackage.onValidateError=emm
project.daoPackage.helpText=the package of you data access object. e.g `com.example.ssm`
project.daoObjName.labelText=Dao Obj Name
project.daoObjName.promptText=e.g`UserMapper`
project.daoObjName.onValidateError=emm
project.daoObjName.helpText=the name of your Mapper(java client) name
project.enablePagePlugin.labelText=Enable Page Plugin
project.enablePagePlugin.helpText=Enable Page Plugin
project.enableInsert.labelText=Enable insert()
project.enableInsert.helpText=Signifies whether an insert statement should be generated.\n\nThe default is true.
project.enableSelectByPrimaryKey.labelText=Enable selectByPrimaryKey() method
project.enableSelectByPrimaryKey.helpText=Signifies whether a select by primary key statement should be generated.\n Regardless of this setting, the statement will not be generated if the table does not have a primary key.\n\nThe default is true.
project.enableSelectByExample.labelText=Enable selectByExample() method
project.enableSelectByExample.helpText=Signifies whether a select by example statement should be generated. \nThis statement enables many different dynamic queries to be generated at run time.\n\nThe default is true.
project.enableUpdateByPrimaryKey.labelText=Enable updateByPrimaryKey() method
project.enableUpdateByPrimaryKey.helpText=Signifies whether an update by primary key statement should be generated.\n Regardless of this setting, the statement will not be generated if the table does not have a primary key.\n\nThe default is true.
project.enableDeleteByPrimaryKey.labelText=Enable deleteByPrimaryKey() method
project.enableDeleteByPrimaryKey.helpText=Signifies whether an delete by primary key statement should be generated.\n Regardless of this setting, the statement will not be generated if the table does not have a primary key.\n\nThe default is true.
project.enableDeleteByExample.labelText=Enable deleteByExample() method
project.enableDeleteByExample.helpText=Signifies whether a delete by example statement should be generated.\n This statement enables many different dynamic deletes to be generated at run time.\n\nThe default is true.
project.enableCountByExample.labelText=Enable countByExample() method
project.enableCountByExample.helpText=Signifies whether a count by example statement should be generated.\n This statement will return the number of rows in a table that match an example.\n\nThe default is true.
project.enableUpdateByExample.labelText=Enable updateByExample() method
project.enableUpdateByExample.helpText=Signifies whether an update by example statement should be generated. \nThis statement will update rows in a table that match an example.\n If true, an update by example "selective" statement will also be generated. \nThe "selective" statement will only update columns where the corresponding value in the record parameter is non-null.\n\nThe default is true.
project.selectByPrimaryKeyQueryId.labelText=SelectByPrimaryKeyQueryId
project.selectByPrimaryKeyQueryId.helpText=This value will be added to the select list of the select by primary key statement in this form: "'<value>' as QUERYID". \nThis can be useful for identifying queries in DBA tracing tools at run time.\n If you use thus value, you should specify a unique id for every different query generated by MBG.
project.selectByExampleQueryId.labelText=SelectByExampleQueryId
project.selectByExampleQueryId.helpText=This value will be added to the select list of the select by example statement in this form: "'<value>' as QUERYID". \nThis can be useful for identifying queries in DBA tracing tools at run time.\n If you use thus value, you should specify a unique id for every different query generated by MBG.
project.entityDir.labelText=Entity Dir
project.entityDir.promptText=e.g `src/main/java`
project.entityDir.onValidateError=emm
project.entityDir.helpText=the dir to save entity obj
project.entityPackage.labelText=Entity Package
project.entityPackage.promptText=e.g `com.example.ssm.entity`
project.entityPackage.onValidateError=emm
project.entityPackage.helpText=the package of entity class
project.entityObjName.labelText=Entity Obj Name
project.entityObjName.promptText=e.g `User`
project.entityObjName.onValidateError=emm
project.entityObjName.helpText=the name of your entity.
project.exampleObjName.labelText=Example Obj Name
project.exampleObjName.promptText=e.g `UserExample`
project.exampleObjName.onValidateError=emm
project.exampleObjName.helpText=the name of your example
project.primaryKey.labelText=GeneratedKey
project.primaryKey.promptText=Primary Key
project.primaryKey.onValidateError=emm
project.primaryKey.helpText=The <generatedKey> element is used to specify properties for auto generated keys (from identity field or sequences). \nIf you specify this element, MyBatis Generator (MBG) will generate an appropriate <selectKey> element inside the generated <insert> element in the SQL map. \nThis element is an optional child element of the <table> element.
project.generateToString.labelText=Generate toString() method
project.generateToString.helpText=Generate toString()
project.generateHashcodeEquals.labelText=Generate hashcode()/equals()
project.generateHashcodeEquals.helpText=Generate hashcode()/equals()
project.implementsSerializable.labelText=Implements Serializable
project.implementsSerializable.helpText=Implements Serializable
project.defaultModelType.labelText=Default Model Type
project.defaultModelType.helpText=This property is used to set the default for generated model types. The model type defines how MBG will generate domain classes. \n\
  With some model types MBG will generate a single domain class for each table, with others MBG may generate different classes depending on the structure of the table. \n\
  The property supports these values:\n\
`conditional`:	This is the default value \n\
                \t\t\tThis model is similar to the hierarchical model except that a separate class will not be generated if that separate class would only contain one field. \n\
                \t\t\tSo if a table has only one primary key field, that field will be merged into the base record class.\n\
`flat`:         \tThis model generates only one domain class for any table. The class will hold all fields in the table.\n\
`hierarchical`:	This model will generate a primary key class if the table has a primary key, another class that holds any BLOB columns in the table, \n\
                \t\t\tand another class that holds the remaining fields. There is an appropriate inheritance relationship between the classes.

project.generateJPA.labelText=Generate JPA
project.generateJPA.helpText=Generate JPA
project.useActualColumnNames.labelText=Use Actual Column Names
project.useActualColumnNames.helpText=Use Actual Column Names
project.enableFluentBuilderMethodsPlugin.labelText=Enable Fluent Builder Methods Plugin
project.enableFluentBuilderMethodsPlugin.helpText=This plugin adds fluent builder methods to the generated model classes.\n\
Example:\n\
given the domain class MyDomainClass\n\
with setter-method setFoo(String foo)\n\
with setter-method setBar(Integer bar)\n\n\
The plugin will create the additional Methods:\n\
public MyDomainClass withFoo(String foo)\n\
public MyDomainClass withBar(Integer bar)\n\
This plugin does not accept any properties.\n\
Using this plugin, you can configure the property values fluently with chained method calls. Example: new MyDomain().withFoo("Test").withBar(4711);

database.savedName.labelText=Saved Name
database.savedName.promptText=Saved Name
database.savedName.onValidateError=emm
database.savedName.helpText=the file name to save your database config
database.databaseType.labelText=Database Type
database.databaseType.helpText=what's the kind of your database
database.dbName.labelText=Database Name
database.dbName.promptText=Db Name
database.dbName.onValidateError=emm
database.dbName.helpText=The name of your database
database.host.labelText=host
database.host.promptText=e.g `localhost`, `db.example.com`, `192.168.1.100`
database.host.onValidateError=emm
database.host.helpText=the host of your database. \n e.g `localhost`, `db.example.com`, `192.168.1.100`
database.port.labelText=port
database.port.promptText=e.g `3306`
database.port.onValidateError=emm
database.port.helpText=port
database.userName.labelText=User Name
database.userName.promptText=e.g `root`
database.userName.onValidateError=emm
database.userName.helpText=the username to connect your database
database.password.labelText=password
database.password.promptText=meow~
database.password.onValidateError=emm
database.password.helpText=the password to connect your database
database.encoding.labelText=encoding
database.encoding.helpText=the encoding to connect your database(MySql)




project.enableCachePlugin.labelText=EnableCachePlugin
project.enableCachePlugin.promptText=EnableCachePlugin
project.enableCachePlugin.onValidateError=emm
project.enableCachePlugin.helpText=This plugin adds a <cache> element to generated SQL maps.
##
project.cache_eviction.labelText=cache_eviction
project.cache_eviction.promptText=cache_eviction
project.cache_eviction.onValidateError=emm
project.cache_eviction.helpText=cache_eviction
##
project.cache_flushInterval.labelText=cache_flushInterval
project.cache_flushInterval.promptText=cache_flushInterval
project.cache_flushInterval.onValidateError=emm
project.cache_flushInterval.helpText=cache_flushInterval
##
project.cache_readOnly.labelText=cache_readOnly
project.cache_readOnly.promptText=cache_readOnly
project.cache_readOnly.onValidateError=emm
project.cache_readOnly.helpText=cache_readOnly
##
project.cache_size.labelText=cache_size
project.cache_size.promptText=cache_size
project.cache_size.onValidateError=emm
project.cache_size.helpText=cache_size
##
project.cache_type.labelText=cache_type
project.cache_type.promptText=cache_type
project.cache_type.onValidateError=emm
project.cache_type.helpText=cache_type
##
project.enableVirtualPrimaryKeyPlugin.labelText=enableVirtualPrimaryKeyPlugin
project.enableVirtualPrimaryKeyPlugin.promptText=e.g.`ID1, ID2`
project.enableVirtualPrimaryKeyPlugin.onValidateError=emm
project.enableVirtualPrimaryKeyPlugin.helpText=This plugin can be used to specify columns that act as primary keys, \n\
        even if they are not defined as primary key in the database.\n\
        This is useful in the case where the database table does not have a primary defined. \n\
        Normally, MBG will generate a very limited set of methods if there is no primary key. \n\
        This plugin can be used to enable generation of the full compliment of MBG methods.\n\n\
        To use the plugin,set the value to a comma or space delimited list of column names that should be treated as primary keys.\n\
        The column names must exactly match the column names returned from the database (typically all UPPERCASE). For example:`ID1, ID2`
##

project.enableCaseInsensitiveLikePlugin.labelText=EnableCaseInsensitiveLikePlugin
project.enableCaseInsensitiveLikePlugin.helpText=This plugin adds methods to the Example class (actually to the Criteria inner class) to support case insensitive LIKE searches.\n This demonstrates adding functionality to the example classes via a plugin, rather than extending the class.
##

project.enableMapperAnnotationPlugin.labelText=add`@Mapper`for java client
project.enableMapperAnnotationPlugin.helpText=This plugin adds the @Mapper annotation to generated mapper interfaces.
##

project.useToStringFromRoot.labelText=UseToStringFromRoot
project.useToStringFromRoot.helpText= If you have specified root class, you can use this property to call super toString method for print fields of root class.\n It can be useful for tables with inheritance relation.
##
project.useEqualsHashCodeFromRoot.labelText=UseEqualsHashCodeFromRoot
project.useEqualsHashCodeFromRoot.helpText=If you have specified root class, you can use this property to call super equals and hashCode methods for check fields of root class.\n It can be useful for tables with inheritance relation.
##